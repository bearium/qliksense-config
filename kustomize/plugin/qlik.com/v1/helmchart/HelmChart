#!/bin/bash

# Helm chart

set -e

function parseyq {
  local file=$1
  chartName=`yq r "$file" chartName`
  chartHome=`yq r "$file" chartHome`
  chartGitUrl=`yq r "$file" chartGitUrl`
  chartVersion=`yq r "$file" chartVersion`
  chartRepo=`yq r "$file" chartRepo`
  valuesFrom=`yq r "$file" valuesFrom`
  values=`yq r "$file" values`
  helmHome=`yq r "$file" helmHome`
  helmBin=`yq r "$file" helmBin`
  releaseName=`yq r "$file" releaseName`
  releaseNamespace=`yq r "$file" releaseNamespace`
  extraArgs=`yq r "$file" extraArgs`
  chartPatches=`yq r "$file" chartPatches`
}


#TMP_DIR=$(mktemp -d)
TMP_DIR=$(dirname $(mktemp -u))

parseyq $1

# Where all the files generated by 'helm init' live.
if [ -z "$helmHome" ] || [ "$helmHome" == "null" ]; then
  helmHome=$TMP_DIR/dotHelm
fi

# Where helm charts are unpacked.
if [ -z "$chartHome" ] || [ "$chartHome" == "null" ]; then
  chartHome=$TMP_DIR/$chartName
fi

if [ -z "$helmBin" ] || [ "$helmBin" == "null" ]; then
  helmBin=helm
fi
valuesGenFile="$(mktemp)"
if [ ! -z "$values" ] && [ "$values" != "null" ]; then
  echo "$values" > "$valuesGenFile"
fi

if [ -f "../values.yaml" ]; then
  valuesFromDefault="--values ../values.yaml"
  if [ -f "values.yaml" ]; then
    valuesFromChart="--values values.yaml"
  fi 
else
  if [ -f "values.yaml" ]; then
    valuesFromDefault="--values values.yaml"
  fi
  if [ -f "$chartName/values.yaml" ]; then
    valuesFromChart="--values $chartName/values.yaml"
  fi
fi

if [ ! -z "$valuesFrom" ] && [ "$valuesFrom" != "null" ]; then
  valuesFrom="--values $valuesFrom"
else
  valuesFrom=""
fi

if [ ! -z "$chartVersion" ] && [ "$chartVersion" != "null" ]; then
  chartVersionExp="--version $chartVersion"
else
  chartVersionExp=""
fi

if [ ! -z "$chartGitUrl" ] && [ "$chartGitUrl" != "null" ]; then
  gitHome=$(mktemp -d)
  CURDIR=$(pwd)
  cd $gitHome
  git init -q
  git config core.sparseCheckout true
  git remote add origin -f $chartGitUrl >& /dev/null
  mkdir -p .git/info
  echo "charts/$chartName" > .git/info/sparse-checkout
  git pull -q origin master
  chartHome=$(pwd)/charts
  cd "$CURDIR"
fi

if [ -z "$chartRepo" ] || [ "$chartRepo" == "null" ]; then
  chartRepo="https://kubernetes-charts.storage.googleapis.com"
fi

if [ -z "$releaseName" ] || [ "$releaseName" == "null" ]; then
  releaseName="release-name"
fi

if [ -z "$releaseNamespace" ] || [ "$releaseNamespace" == "null" ]; then
  releaseNamespace="default"
fi

if [ -z "$extraArgs" ] || [ "$extraArgs" == "null" ]; then
  extraArgs=""
fi

function doHelm {
  $helmBin --home $helmHome $@
}

# The init command is extremely chatty
doHelm init --client-only >& /dev/null

if [ ! -d "$chartHome" ]; then
  doHelm fetch --untar \
      --untardir $chartHome \
      --repo $chartRepo \
      $chartVersionExp \
      $chartName
  mv $chartHome/$chartName $chartHome/$chartName-tmp
  cp -a $chartHome/$chartName-tmp/. $chartHome/ 
  rm -fr $chartHome/$chartName-tmp
fi

doHelm dep build $chartHome >& /dev/null

doHelm template \
    $valuesFromDefault \
    $valuesFromChart \
    $valuesFrom \
    --values $valuesGenFile \
    --name $releaseName \
    --namespace $releaseNamespace \
    $extraArgs \
    $chartHome > helmoutput.yaml


#Allow pathes in origin repository to be applied
if [ ! -z "$chartPatches" ] && [ "$chartPatches" != "null" ]; then
  temp=$(mktemp -u)
  for f in $chartHome/$chartPatches/*.yaml; do
    if [ -z "${releaseName##*$chartName*}" ]; then
      sed 's/[?]//g' "$f" > "$temp"
    else
      sed 's/[?]/'"$releaseName"'-/g' "$f" > "$temp"
    fi
    mv "$temp" "$f"
    sed 's/[*]/'"$releaseName"'-/g' "$f" > "$temp"
    mv "$temp" "$f"
  done

  cp "$chartHome/$chartPatches/kustomization.yaml" kustomization.orig.yaml
  count=0
  while true; do 
    cp helmoutput.yaml "$chartHome/$chartPatches"
    yq d -i "$chartHome/$chartPatches/kustomization.yaml" "patchesJson6902"
    yq d -i "$chartHome/$chartPatches/kustomization.yaml" "resources"
    patch=`yq r kustomization.orig.yaml patchesJson6902[$count]`
    if [ ! -z "$patch" ] && [ "$patch" != "null" ]; then
      echo "$patch" | yq p - patchesJson6902[+] | yq m -i "$chartHome/$chartPatches/kustomization.yaml" -
    else
      break
    fi 
    yq w -i "$chartHome/$chartPatches/kustomization.yaml" "resources[+]" "helmoutput.yaml"
    out=$(kustomize build "$chartHome/$chartPatches" 2> /dev/null) && echo "$out" > helmoutput.yaml
    count=$(expr $count + 1)
  done
fi

cat helmoutput.yaml
rm -f helmoutput.yaml
rm -f kustomization.orig.yaml
#/bin/rm -rf $TMP_DIR
